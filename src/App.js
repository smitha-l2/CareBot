import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { API_CONFIG, getApiUrl, isValidFileType, isValidFileSize } from './config/api';
import './index.css';

function App() {
  const [message, setMessage] = useState('');
  const [uploadedFile, setUploadedFile] = useState(null);
  const [originalFile, setOriginalFile] = useState(null); // Store the original file object
  const [isDragOver, setIsDragOver] = useState(false);
  const [userRole, setUserRole] = useState('patient'); // 'patient', 'admin', 'doctor'
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [patientName, setPatientName] = useState('');
  const [contactNumber, setContactNumber] = useState('');
  const [dateOfBirth, setDateOfBirth] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const [uploadStatus, setUploadStatus] = useState('');
  
  // Data viewing functionality
  const [patients, setPatients] = useState([]);
  const [documents, setDocuments] = useState([]);
  
  // Patients Dashboard functionality
  const [showPatientsDashboard, setShowPatientsDashboard] = useState(false);
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [patientDocuments, setPatientDocuments] = useState([]);
  const [isLoadingPatients, setIsLoadingPatients] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  
  // Admin view management
  const [currentAdminView, setCurrentAdminView] = useState('none'); // 'upload', 'dashboard', or 'none'
  
  // Chat functionality
  const [chatMessages, setChatMessages] = useState([
    {
      type: 'bot',
      message: 'Hello! I\'m Carebot, your AI healthcare assistant. I can help answer general health questions, provide information about symptoms, medications, and wellness tips. How can I assist you today?',
      timestamp: new Date()
    }
  ]);
  const [isChatLoading, setIsChatLoading] = useState(false);
  const chatMessagesRef = useRef(null);

  // Auto-scroll to bottom when new messages are added
  useEffect(() => {
    if (chatMessagesRef.current) {
      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;
    }
  }, [chatMessages, isChatLoading]);

  // Carebot Knowledge Base from FAQ
  const getCarebotResponse = (userMessage) => {
    const msg = userMessage.toLowerCase();
    
    // Emergency situations
    if (msg.includes('emergency') || msg.includes('911') || msg.includes('chest pain') || 
        msg.includes('difficulty breathing') || msg.includes('heart attack') || 
        msg.includes('stroke') || msg.includes('bleeding') || msg.includes('unconscious')) {
      return "üö® **EMERGENCY ALERT** üö®\n\nFor medical emergencies, **call 911 immediately** or go to the nearest emergency room. Do not rely on Carebot for emergency medical advice.\n\n**Emergency signs include:**\n‚Ä¢ Chest pain or pressure\n‚Ä¢ Difficulty breathing\n‚Ä¢ Severe bleeding\n‚Ä¢ Loss of consciousness\n‚Ä¢ Signs of stroke\n‚Ä¢ Severe injuries\n\n**Get immediate medical help now!**";
    }

    // What is Carebot
    if (msg.includes('what is carebot') || msg.includes('about carebot') || msg.includes('who are you')) {
      return "I'm Carebot, your AI-powered healthcare assistant! ü§ñ\n\nI'm designed to:\n‚Ä¢ Provide reliable health information 24/7\n‚Ä¢ Answer basic medical questions\n‚Ä¢ Help you navigate healthcare services\n‚Ä¢ Offer general wellness guidance\n‚Ä¢ Assist with symptom understanding\n\n**Important:** I'm a supplementary tool and cannot replace professional medical advice from qualified healthcare providers. Always consult your doctor for serious health concerns!";
    }

    // Medication questions
    if (msg.includes('medication') || msg.includes('drug') || msg.includes('pill') || 
        msg.includes('side effect') || msg.includes('prescription')) {
      return "üíä **Medication Information**\n\nI can provide general information about:\n‚Ä¢ Common medication uses and effects\n‚Ä¢ General side effects to watch for\n‚Ä¢ Basic drug interaction awareness\n‚Ä¢ Medication adherence tips\n\n**Important reminders:**\n‚Ä¢ Never stop or change medications without consulting your healthcare provider\n‚Ä¢ Always inform all your healthcare providers about ALL medications you take\n‚Ä¢ Include over-the-counter medications and supplements\n‚Ä¢ Contact your pharmacist for detailed interaction checks\n‚Ä¢ Seek immediate care for severe medication reactions\n\nWhat specific medication question can I help you with?";
    }

    // Pain reliever information
    if (msg.includes('tylenol') || msg.includes('acetaminophen') || msg.includes('advil') || 
        msg.includes('ibuprofen') || msg.includes('aspirin') || msg.includes('pain reliever')) {
      return "üíä **Pain Reliever Information**\n\n**Acetaminophen (Tylenol):**\n‚Ä¢ Uses: Pain relief, fever reduction\n‚Ä¢ Dosage: Follow package (max 3,000mg/day)\n‚Ä¢ Safe for most people\n‚Ä¢ Caution: Avoid with liver disease or heavy alcohol use\n\n**Ibuprofen (Advil, Motrin):**\n‚Ä¢ Uses: Pain, inflammation, fever reduction\n‚Ä¢ Take with food to reduce stomach irritation\n‚Ä¢ Caution: Avoid with stomach ulcers, kidney/heart problems\n\n**Aspirin:**\n‚Ä¢ Uses: Pain, inflammation, blood thinning\n‚Ä¢ Caution: Avoid in children (Reye's syndrome risk)\n‚Ä¢ Don't use with bleeding disorders\n\n**General safety:**\n‚Ä¢ Read labels carefully\n‚Ä¢ Don't exceed recommended doses\n‚Ä¢ Don't combine multiple pain relievers without guidance\n‚Ä¢ Consult pharmacist or doctor for questions\n\n**Always consult your healthcare provider for persistent pain.**";
    }

    // Cold and allergy medications
    if (msg.includes('cold medicine') || msg.includes('allergy') || msg.includes('antihistamine') || 
        msg.includes('decongestant') || msg.includes('runny nose') || msg.includes('sneezing')) {
      return "ü§ß **Cold & Allergy Medication Info**\n\n**Antihistamines:**\n‚Ä¢ Examples: Benadryl, Claritin, Zyrtec\n‚Ä¢ Uses: Allergies, runny nose, sneezing\n‚Ä¢ Note: Some cause drowsiness (Benadryl), others don't (Claritin)\n\n**Decongestants:**\n‚Ä¢ Examples: Sudafed, phenylephrine\n‚Ä¢ Uses: Nasal congestion\n‚Ä¢ Caution: Can raise blood pressure\n\n**Cough medicines:**\n‚Ä¢ Dextromethorphan: Suppresses dry cough\n‚Ä¢ Guaifenesin: Helps loosen mucus\n\n**Natural options:**\n‚Ä¢ Saline nasal rinse\n‚Ä¢ Honey for cough (not for babies under 1 year)\n‚Ä¢ Steam inhalation\n‚Ä¢ Stay hydrated\n\n**‚ö†Ô∏è Important:**\n‚Ä¢ Check with pharmacist for drug interactions\n‚Ä¢ Don't exceed recommended doses\n‚Ä¢ Some medications not suitable for certain conditions\n\n**See your healthcare provider if symptoms persist or worsen.**";
    }

    // Digestive medications
    if (msg.includes('antacid') || msg.includes('heartburn') || msg.includes('acid reflux') || 
        msg.includes('stomach medicine') || msg.includes('pepto') || msg.includes('tums')) {
      return "üçΩÔ∏è **Digestive Medication Info**\n\n**For Heartburn/Acid Reflux:**\n‚Ä¢ **Antacids** (Tums, Rolaids): Quick relief for occasional heartburn\n‚Ä¢ **H2 blockers** (Pepcid): Longer-lasting relief\n‚Ä¢ **Proton pump inhibitors** (Prilosec): For frequent heartburn\n\n**For Upset Stomach:**\n‚Ä¢ **Bismuth subsalicylate** (Pepto-Bismol): Nausea, upset stomach, diarrhea\n‚Ä¢ **Simethicone** (Gas-X): Gas and bloating\n\n**For Diarrhea:**\n‚Ä¢ **Loperamide** (Imodium): Slows bowel movements\n‚Ä¢ **Avoid if you have fever or blood in stool**\n\n**Lifestyle tips:**\n‚Ä¢ Eat smaller, more frequent meals\n‚Ä¢ Avoid spicy, fatty foods\n‚Ä¢ Don't lie down immediately after eating\n‚Ä¢ Stay hydrated\n\n**‚ö†Ô∏è See your healthcare provider for:**\n‚Ä¢ Persistent symptoms\n‚Ä¢ Blood in stool or vomit\n‚Ä¢ Severe abdominal pain\n‚Ä¢ Signs of dehydration";
    }

    // Specific symptom analysis (MOVED BEFORE GENERAL SYMPTOM CHECK)
    // Headache
    if (msg.includes('headache') || msg.includes('head pain') || msg.includes('migraine')) {
      return "üß† **Headache Information**\n\n**Common types:**\n‚Ä¢ **Tension headaches**: Stress, fatigue, poor posture\n‚Ä¢ **Migraines**: Hormonal changes, certain foods, stress\n‚Ä¢ **Cluster headaches**: Severe pain around one eye\n\n**Possible general management:**\n‚Ä¢ Over-the-counter pain relievers (acetaminophen, ibuprofen)\n‚Ä¢ Rest in quiet, dark room\n‚Ä¢ Cold or warm compress\n‚Ä¢ Stay hydrated\n‚Ä¢ Regular sleep schedule\n\n**üö® SEEK IMMEDIATE CARE for:**\n‚Ä¢ Sudden severe headache unlike any before\n‚Ä¢ Headache with fever, stiff neck, rash\n‚Ä¢ Headache after head injury\n‚Ä¢ Progressive worsening headaches\n\n**Consult your healthcare provider for persistent or frequent headaches.**";
    }

    // Cough
    if (msg.includes('cough') && !msg.includes('headache')) {
      return "üò∑ **Cough Information**\n\n**Possible conditions:**\n‚Ä¢ Common cold or flu\n‚Ä¢ Bronchitis\n‚Ä¢ Allergies\n‚Ä¢ Asthma\n‚Ä¢ GERD (acid reflux)\n\n**General management:**\n‚Ä¢ Stay hydrated (warm liquids helpful)\n‚Ä¢ Use humidifier\n‚Ä¢ Honey for throat irritation (not for children under 1 year)\n‚Ä¢ Over-the-counter options:\n  - Dextromethorphan (cough suppressant for dry cough)\n  - Guaifenesin (expectorant to loosen mucus)\n\n**üö® SEEK IMMEDIATE CARE for:**\n‚Ä¢ Coughing up blood\n‚Ä¢ Severe difficulty breathing\n‚Ä¢ High fever with productive cough\n‚Ä¢ Chest pain with coughing\n\n**See your doctor if cough persists over 2-3 weeks.**";
    }

    // Nausea and vomiting
    if (msg.includes('nausea') || msg.includes('vomit') || msg.includes('throw up') || msg.includes('stomach ache')) {
      return "ü§¢ **Nausea & Digestive Issues**\n\n**Possible causes:**\n‚Ä¢ Viral gastroenteritis (stomach flu)\n‚Ä¢ Food poisoning\n‚Ä¢ Motion sickness\n‚Ä¢ Medication side effects\n‚Ä¢ Stress or anxiety\n‚Ä¢ Pregnancy (morning sickness)\n\n**General management:**\n‚Ä¢ Clear fluids in small, frequent sips\n‚Ä¢ BRAT diet: Bananas, Rice, Applesauce, Toast\n‚Ä¢ Ginger or peppermint may help\n‚Ä¢ Rest\n‚Ä¢ Avoid dairy, fatty, or spicy foods\n\n**Over-the-counter options:**\n‚Ä¢ Bismuth subsalicylate (Pepto-Bismol)\n‚Ä¢ Simethicone for gas (Gas-X)\n\n**üö® SEEK CARE for:**\n‚Ä¢ Persistent vomiting >24 hours\n‚Ä¢ Signs of dehydration\n‚Ä¢ Blood in vomit\n‚Ä¢ Severe abdominal pain\n‚Ä¢ High fever\n\n**Contact your healthcare provider for persistent symptoms.**";
    }

    // Fever
    if (msg.includes('fever') && !msg.includes('headache') && !msg.includes('cough')) {
      return "üå°Ô∏è **Fever Information**\n\n**Normal body temperature:** 98.6¬∞F (37¬∞C)\n**Fever:** Generally 100.4¬∞F (38¬∞C) or higher\n\n**Possible causes:**\n‚Ä¢ Viral infections (cold, flu)\n‚Ä¢ Bacterial infections\n‚Ä¢ Inflammatory conditions\n‚Ä¢ Heat exhaustion\n‚Ä¢ Medication reactions\n\n**General management:**\n‚Ä¢ Rest and stay hydrated\n‚Ä¢ Light clothing and cool environment\n‚Ä¢ Over-the-counter fever reducers:\n  - Acetaminophen (Tylenol): Safe for most people\n  - Ibuprofen (Advil, Motrin): Also reduces inflammation\n  - Follow package dosing instructions\n\n**üö® SEEK IMMEDIATE CARE for:**\n‚Ä¢ Fever over 103¬∞F (39.4¬∞C)\n‚Ä¢ Fever with severe headache and stiff neck\n‚Ä¢ Difficulty breathing\n‚Ä¢ Persistent high fever despite medication\n‚Ä¢ Signs of dehydration\n\n**For infants under 3 months, any fever requires immediate medical attention.**";
    }

    // Back pain
    if (msg.includes('back pain') || msg.includes('backache') || msg.includes('spine')) {
      return "ü¶¥ **Back Pain Information**\n\n**Common causes:**\n‚Ä¢ Muscle strain or sprain\n‚Ä¢ Poor posture\n‚Ä¢ Herniated disc\n‚Ä¢ Arthritis\n‚Ä¢ Stress and tension\n\n**General management:**\n‚Ä¢ Rest but avoid prolonged bed rest\n‚Ä¢ Gentle movement and stretching\n‚Ä¢ Heat or ice therapy (try both to see what helps)\n‚Ä¢ Over-the-counter pain relievers:\n  - Ibuprofen (reduces inflammation)\n  - Acetaminophen (pain relief)\n  - Topical pain creams\n\n**Prevention:**\n‚Ä¢ Proper lifting techniques\n‚Ä¢ Good posture\n‚Ä¢ Regular exercise\n‚Ä¢ Ergonomic workspace\n\n**üö® SEEK IMMEDIATE CARE for:**\n‚Ä¢ Back pain with leg weakness or numbness\n‚Ä¢ Loss of bladder or bowel control\n‚Ä¢ Severe pain after injury\n‚Ä¢ Fever with back pain\n\n**See a healthcare provider if pain persists beyond a few days or worsens.**";
    }

    // Chest pain
    if (msg.includes('chest pain') || msg.includes('chest pressure')) {
      return "üö® **CHEST PAIN - IMPORTANT** üö®\n\n**CALL 911 IMMEDIATELY if you have:**\n‚Ä¢ Crushing chest pain\n‚Ä¢ Pain radiating to arm, jaw, or back\n‚Ä¢ Shortness of breath with chest pain\n‚Ä¢ Nausea, sweating with chest pain\n‚Ä¢ Sudden severe chest pain\n\n**Possible non-emergency causes:**\n‚Ä¢ Acid reflux/heartburn\n‚Ä¢ Muscle strain\n‚Ä¢ Anxiety or panic attacks\n‚Ä¢ Costochondritis (chest wall inflammation)\n\n**For mild heartburn:**\n‚Ä¢ Antacids (Tums, Rolaids)\n‚Ä¢ Avoid spicy, fatty foods\n‚Ä¢ Don't lie down immediately after eating\n\n**‚ö†Ô∏è NEVER ignore chest pain - when in doubt, seek immediate medical care!**\n\nChest pain can be a sign of serious conditions including heart attack. Always err on the side of caution.";
    }

    // Sore throat
    if (msg.includes('sore throat') || msg.includes('throat pain')) {
      return "üòñ **Sore Throat Information**\n\n**Common causes:**\n‚Ä¢ Viral infections (cold, flu)\n‚Ä¢ Bacterial infections (strep throat)\n‚Ä¢ Allergies\n‚Ä¢ Dry air\n‚Ä¢ Acid reflux\n\n**General management:**\n‚Ä¢ Warm salt water gargle\n‚Ä¢ Throat lozenges or hard candy\n‚Ä¢ Warm liquids (tea with honey)\n‚Ä¢ Stay hydrated\n‚Ä¢ Use humidifier\n\n**Over-the-counter options:**\n‚Ä¢ Pain relievers: acetaminophen, ibuprofen\n‚Ä¢ Throat sprays with benzocaine\n‚Ä¢ Lozenges with menthol or eucalyptus\n\n**üö® SEEK CARE for:**\n‚Ä¢ Severe throat pain with difficulty swallowing\n‚Ä¢ High fever with sore throat\n‚Ä¢ White patches on throat\n‚Ä¢ Swollen glands in neck\n‚Ä¢ Symptoms lasting more than a week\n\n**Strep throat requires antibiotic treatment - see your healthcare provider.**";
    }

    // Diarrhea
    if (msg.includes('diarrhea') || msg.includes('loose stool')) {
      return "üíß **Diarrhea Information**\n\n**Common causes:**\n‚Ä¢ Viral or bacterial infections\n‚Ä¢ Food poisoning\n‚Ä¢ Stress or anxiety\n‚Ä¢ Medication side effects\n‚Ä¢ Inflammatory bowel conditions\n\n**General management:**\n‚Ä¢ Stay hydrated with clear fluids\n‚Ä¢ Electrolyte replacement (sports drinks, ORS)\n‚Ä¢ BRAT diet: Bananas, Rice, Applesauce, Toast\n‚Ä¢ Probiotics may help\n‚Ä¢ Rest\n\n**Over-the-counter options:**\n‚Ä¢ Loperamide (Imodium) - for symptom relief\n‚Ä¢ Bismuth subsalicylate (Pepto-Bismol)\n‚Ä¢ **Avoid anti-diarrheal medications if you have fever or blood in stool**\n\n**üö® SEEK CARE for:**\n‚Ä¢ Blood in stool\n‚Ä¢ High fever\n‚Ä¢ Signs of severe dehydration\n‚Ä¢ Persistent diarrhea >3 days\n‚Ä¢ Severe abdominal pain\n\n**See your healthcare provider for persistent or severe symptoms.**";
    }

    // Rash or skin problems
    if (msg.includes('rash') || msg.includes('itchy') || msg.includes('skin') || msg.includes('eczema')) {
      return "ü©π **Skin & Rash Information**\n\n**Common types:**\n‚Ä¢ **Contact dermatitis**: Allergic reaction to substances\n‚Ä¢ **Eczema**: Chronic inflammatory skin condition\n‚Ä¢ **Fungal infections**: Athlete's foot, ringworm\n‚Ä¢ **Heat rash**: From hot, humid conditions\n\n**General management:**\n‚Ä¢ Keep area clean and dry\n‚Ä¢ Avoid scratching\n‚Ä¢ Cool compresses for itching\n‚Ä¢ Loose, breathable clothing\n\n**Over-the-counter options:**\n‚Ä¢ Hydrocortisone cream (1%) for inflammation\n‚Ä¢ Calamine lotion for itching\n‚Ä¢ Antihistamines (Benadryl, Claritin) for allergic reactions\n‚Ä¢ Antifungal creams for suspected fungal infections\n\n**üö® SEEK IMMEDIATE CARE for:**\n‚Ä¢ Rash with fever\n‚Ä¢ Rapidly spreading rash\n‚Ä¢ Signs of infection (pus, red streaking)\n‚Ä¢ Severe itching affecting daily life\n‚Ä¢ Difficulty breathing with rash\n\n**See your healthcare provider for persistent or worsening rashes.**";
    }

    // General symptoms (MOVED TO AFTER SPECIFIC SYMPTOM CHECKS)
    if (msg.includes('symptom') || msg.includes('pain') || msg.includes('tired') || msg.includes('fatigue')) {
      return "ü©∫ **Symptom Guidance**\n\nWhen describing symptoms, please include:\n‚Ä¢ When symptoms started\n‚Ä¢ What makes them better or worse\n‚Ä¢ Severity level (1-10 scale for pain)\n‚Ä¢ Whether they're constant or come and go\n‚Ä¢ Any associated symptoms\n\n**Seek immediate medical attention if you have:**\n‚Ä¢ Severe or worsening symptoms\n‚Ä¢ Symptoms interfering with daily activities\n‚Ä¢ Fever with severe symptoms\n‚Ä¢ Signs of serious conditions\n\n**Remember:** I can provide general information, but cannot diagnose. Always consult your healthcare provider for proper evaluation.\n\nWhat symptoms are you experiencing?";
    }

    // Mental health
    if (msg.includes('mental health') || msg.includes('depression') || msg.includes('anxiety') || 
        msg.includes('stress') || msg.includes('worried') || msg.includes('sad')) {
      return "üß† **Mental Health Support**\n\nMental health is just as important as physical health. I can provide general information about:\n‚Ä¢ Stress management techniques\n‚Ä¢ Coping strategies\n‚Ä¢ When to seek professional help\n‚Ä¢ General wellness practices\n\n**For mental health concerns, please:**\n‚Ä¢ Speak with a mental health professional\n‚Ä¢ Contact your primary care provider\n‚Ä¢ Use crisis hotlines if having thoughts of self-harm\n‚Ä¢ Seek immediate help for mental health emergencies\n\n**Crisis Resources:**\n‚Ä¢ National Suicide Prevention Lifeline: 988\n‚Ä¢ Crisis Text Line: Text HOME to 741741\n\nHow can I support your mental wellness today?";
    }

    // Preventive care
    if (msg.includes('screening') || msg.includes('checkup') || msg.includes('preventive') || 
        msg.includes('vaccine') || msg.includes('immunization') || msg.includes('wellness')) {
      return "üõ°Ô∏è **Preventive Care & Wellness**\n\nPreventive care is key to staying healthy! General recommendations include:\n\n**Regular Screenings:**\n‚Ä¢ Blood pressure and cholesterol checks\n‚Ä¢ Cancer screenings (mammograms, colonoscopies)\n‚Ä¢ Eye and hearing exams\n‚Ä¢ Bone density tests\n\n**Vaccinations:**\n‚Ä¢ Annual flu shots\n‚Ä¢ COVID-19 boosters\n‚Ä¢ Tdap (tetanus, diphtheria, pertussis)\n‚Ä¢ Age-specific vaccines (shingles, pneumonia)\n\n**Healthy Lifestyle:**\n‚Ä¢ Regular exercise\n‚Ä¢ Balanced nutrition\n‚Ä¢ Quality sleep\n‚Ä¢ Stress management\n‚Ä¢ Avoiding tobacco and limiting alcohol\n\nWhat specific preventive care question can I help you with?";
    }

    // Doctor appointments
    if (msg.includes('doctor') || msg.includes('appointment') || msg.includes('visit') || 
        msg.includes('prepare') || msg.includes('questions')) {
      return "üë©‚Äç‚öïÔ∏è **Doctor Appointment Preparation**\n\nI can help you prepare for your healthcare visits!\n\n**Before your appointment:**\n‚Ä¢ List your symptoms and when they started\n‚Ä¢ Note what makes symptoms better or worse\n‚Ä¢ Prepare questions about your health concerns\n‚Ä¢ Bring a list of all medications and supplements\n‚Ä¢ Write down your medical history\n\n**Good questions to ask:**\n‚Ä¢ What could be causing my symptoms?\n‚Ä¢ What tests might I need?\n‚Ä¢ What are my treatment options?\n‚Ä¢ Are there lifestyle changes that could help?\n‚Ä¢ When should I follow up?\n\n**Remember:** Always follow your healthcare provider's advice, as they have access to your complete medical history.\n\nWhat specific aspect of your appointment can I help you prepare for?";
    }

    // Insurance and healthcare navigation
    if (msg.includes('insurance') || msg.includes('cost') || msg.includes('afford') || 
        msg.includes('expensive') || msg.includes('coverage')) {
      return "üí∞ **Healthcare Navigation & Costs**\n\nI understand healthcare costs can be challenging. Here are some resources:\n\n**For medication costs:**\n‚Ä¢ Patient assistance programs from pharmaceutical companies\n‚Ä¢ Generic medication alternatives\n‚Ä¢ Prescription discount programs\n‚Ä¢ Government assistance programs\n\n**For general healthcare:**\n‚Ä¢ Community health centers\n‚Ä¢ Free and low-cost clinics\n‚Ä¢ Hospital financial assistance programs\n‚Ä¢ Insurance marketplace options\n\n**When to seek care:**\n‚Ä¢ Emergency Room: Life-threatening conditions\n‚Ä¢ Urgent Care: Non-emergency issues that can't wait\n‚Ä¢ Regular Appointment: Routine and preventive care\n\nWhat specific healthcare navigation question can I help you with?";
    }

    // Privacy and security
    if (msg.includes('privacy') || msg.includes('secure') || msg.includes('confidential') || 
        msg.includes('hipaa') || msg.includes('data')) {
      return "üîí **Privacy & Security**\n\nYour health information privacy is important:\n\n**Your conversations with me are:**\n‚Ä¢ Protected by healthcare privacy standards\n‚Ä¢ Encrypted and stored securely\n‚Ä¢ Only accessible to authorized healthcare personnel\n‚Ä¢ Not shared with third parties without consent\n\n**Best practices:**\n‚Ä¢ Avoid sharing sensitive personal identifiers unless necessary\n‚Ä¢ Use secure internet connections\n‚Ä¢ Log out of shared devices\n\n**Data storage:**\n‚Ä¢ Conversations may be temporarily stored for context\n‚Ä¢ Information is handled according to healthcare privacy regulations (HIPAA)\n‚Ä¢ Used only for quality improvement and continuity of care\n\nDo you have specific privacy concerns I can address?";
    }

    // General health information
    if (msg.includes('health') || msg.includes('wellness') || msg.includes('healthy') || 
        msg.includes('diet') || msg.includes('exercise') || msg.includes('nutrition')) {
      return "üåü **General Health & Wellness**\n\nI'm here to help with general health information!\n\n**Common topics I can assist with:**\n‚Ä¢ Nutrition and healthy eating patterns\n‚Ä¢ Exercise recommendations for different fitness levels\n‚Ä¢ Sleep hygiene and stress management\n‚Ä¢ Smoking cessation and alcohol moderation\n‚Ä¢ Weight management strategies\n‚Ä¢ Understanding lab results (general ranges)\n‚Ä¢ Lifestyle modifications for chronic conditions\n\n**Key principles of good health:**\n‚Ä¢ Balanced, nutritious diet\n‚Ä¢ Regular physical activity\n‚Ä¢ Adequate sleep (7-9 hours for adults)\n‚Ä¢ Stress management\n‚Ä¢ Regular healthcare checkups\n‚Ä¢ Staying hydrated\n‚Ä¢ Avoiding harmful substances\n\nWhat specific health topic would you like to explore?";
    }

    // Technical issues
    if (msg.includes('not working') || msg.includes('technical') || msg.includes('error') || 
        msg.includes('problem') || msg.includes('help') || msg.includes('support')) {
      return "üîß **Technical Support**\n\nIf you're experiencing technical difficulties:\n\n**Try these steps:**\n1. Refresh your browser or restart the app\n2. Check your internet connection\n3. Clear your browser cache\n4. Try using a different browser or device\n\n**For mobile devices:**\n‚Ä¢ Ensure you have a stable internet connection\n‚Ä¢ Update your browser or app\n‚Ä¢ Restart your device if needed\n\n**If problems persist:**\n‚Ä¢ Contact technical support\n‚Ä¢ Speak with a healthcare provider\n‚Ä¢ Try rephrasing your question using simpler terms\n\nIs there a specific technical issue I can help you troubleshoot?";
    }

    // Default helpful response
    return "Hello! I'm here to help with your health questions. üòä\n\n**I can assist you with:**\n‚Ä¢ General health information and wellness tips\n‚Ä¢ Common symptoms and when to seek care\n‚Ä¢ Medication information and side effects\n‚Ä¢ Preventive care and screening guidelines\n‚Ä¢ Mental health and stress management\n‚Ä¢ Nutrition and exercise guidance\n‚Ä¢ Preparing for doctor appointments\n\n**Please remember:**\n‚Ä¢ I provide general information only\n‚Ä¢ I cannot diagnose or prescribe treatments\n‚Ä¢ For emergencies, call 911 immediately\n‚Ä¢ Always consult healthcare professionals for serious concerns\n\nWhat health topic can I help you with today? Feel free to ask specific questions or describe any concerns you might have!";
  };

  const handleSendMessage = () => {
    if (message.trim()) {
      const userMessage = message.trim();
      
      // Add user message to chat
      const newUserMessage = {
        type: 'user',
        message: userMessage,
        timestamp: new Date()
      };
      
      setChatMessages(prev => [...prev, newUserMessage]);
      setMessage('');
      setIsChatLoading(true);
      
      // Simulate thinking time and generate bot response
      setTimeout(() => {
        const botResponse = getCarebotResponse(userMessage);
        const newBotMessage = {
          type: 'bot',
          message: botResponse,
          timestamp: new Date()
        };
        
        setChatMessages(prev => [...prev, newBotMessage]);
        setIsChatLoading(false);
      }, 1000); // 1 second delay to simulate processing
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  const handleFileUpload = (file) => {
    if (file) {
      // Validate file type and size
      if (!isValidFileType(file)) {
        alert('Unsupported file type. Please upload PDF, JPG, PNG, or DOC files only.');
        return;
      }
      
      if (!isValidFileSize(file)) {
        alert(`File too large. Maximum size allowed is ${API_CONFIG.MAX_FILE_SIZE / (1024 * 1024)}MB.`);
        return;
      }
      
      setOriginalFile(file); // Store the original file object for upload
      setUploadedFile({
        name: file.name,
        size: (file.size / 1024 / 1024).toFixed(2) + ' MB',
        type: file.type
      });
      setUploadStatus(''); // Clear any previous status
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragOver(false);
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleFileUpload(files[0]);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const removeUploadedFile = () => {
    setUploadedFile(null);
    setOriginalFile(null);
    setUploadStatus('');
  };

  // Role-based access control
  const isAdmin = userRole === 'admin';
  const hasUploadAccess = isAdmin; // Only admins can access upload functionality

  // Login simulation function
  const handleLogin = (role) => {
    setUserRole(role);
    setIsLoggedIn(true);
    // Set default admin view to none (clean interface)
    if (role === 'admin') {
      setCurrentAdminView('none');
    }
  };

  const handleLogout = () => {
    setUserRole('patient');
    setIsLoggedIn(false);
    setUploadedFile(null);
    setOriginalFile(null);
    setPatientName('');
    setContactNumber('');
    setDateOfBirth('');
    setIsUploading(false);
    setUploadStatus('');
    // Reset admin view states
    setCurrentAdminView('none');
    setShowPatientsDashboard(false);
  };

  // Patients Dashboard Functions
  const loadPatientsDashboard = async () => {
    setIsLoadingPatients(true);
    try {
      // Fetch patients
      const patientsResponse = await axios.get(getApiUrl('/patients'), { timeout: 10000 });
      setPatients(patientsResponse.data);

      // Fetch documents
      const documentsResponse = await axios.get(getApiUrl('/documents'), { timeout: 10000 });
      setDocuments(documentsResponse.data);

      setShowPatientsDashboard(true);
      setCurrentAdminView('dashboard');
      console.log('Dashboard loaded successfully');
    } catch (error) {
      console.error('Error loading patients dashboard:', error);
      alert(`Error loading dashboard: ${error.message}`);
    } finally {
      setIsLoadingPatients(false);
    }
  };

  const loadPatientDocuments = async (patientId) => {
    try {
      const response = await axios.get(getApiUrl(`/patients/${patientId}/documents`), { timeout: 5000 });
      setPatientDocuments(response.data);
    } catch (error) {
      console.error('Error loading patient documents:', error);
      setPatientDocuments([]);
    }
  };

  const selectPatient = (patient) => {
    setSelectedPatient(patient);
    loadPatientDocuments(patient.id);
  };

  const filteredPatients = patients.filter(patient =>
    patient.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    patient.contactNumber.includes(searchTerm)
  );

  const handleSubmitUpload = async () => {
    if (!originalFile) {
      alert('Please select a file to upload.');
      return;
    }
    if (!patientName.trim()) {
      alert('Please enter the patient name.');
      return;
    }
    if (!contactNumber.trim()) {
      alert('Please enter the contact number.');
      return;
    }
    if (!dateOfBirth.trim()) {
      alert('Please enter the date of birth.');
      return;
    }
    
    setIsUploading(true);
    setUploadStatus('Uploading...');
    
    try {
      // Create FormData object for file upload
      const formData = new FormData();
      formData.append('file', originalFile);
      formData.append('patientName', patientName.trim());
      formData.append('contactNumber', contactNumber.trim());
      formData.append('dateOfBirth', dateOfBirth);
      formData.append('uploadedBy', userRole);
      formData.append('uploadTimestamp', new Date().toISOString());
      
      // Configure API endpoint using configuration
      const uploadUrl = getApiUrl(API_CONFIG.ENDPOINTS.UPLOAD_DOCUMENT);
      console.log('Upload URL:', uploadUrl);
      console.log('FormData contents:', {
        patientName: patientName.trim(),
        contactNumber: contactNumber.trim(),
        dateOfBirth: dateOfBirth,
        userRole: userRole,
        fileName: originalFile.name,
        fileSize: originalFile.size
      });
      
      // Upload request with progress tracking
      const response = await axios.post(uploadUrl, formData, {
        // Don't set Content-Type header manually for FormData - axios will set it automatically with boundary
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          setUploadStatus(`Uploading... ${percentCompleted}%`);
        },
        timeout: API_CONFIG.TIMEOUT,
      });
      
      // Handle successful upload
      if (response.status === 200 || response.status === 201) {
        setUploadStatus('Upload successful!');
        console.log('Upload successful:', response.data);
        
        // Show success message with response data
        const uploadId = response.data.uploadId || 'N/A';
        const whatsappSent = response.data.whatsappNotificationSent || false;
        const whatsappMessage = whatsappSent ? 
          '‚úÖ WhatsApp notification sent to patient' : 
          '‚ö†Ô∏è WhatsApp notification could not be sent';
        
        alert(`Document uploaded successfully!\n\nPatient: ${patientName}\nUpload ID: ${uploadId}\nStatus: Completed\n\n${whatsappMessage}`);
        
        // Reset form after successful upload
        setTimeout(() => {
          setUploadedFile(null);
          setOriginalFile(null);
          setPatientName('');
          setContactNumber('');
          setDateOfBirth('');
          setUploadStatus('');
        }, 2000);
      }
      
    } catch (error) {
      console.error('Upload error details:', {
        message: error.message,
        code: error.code,
        response: error.response,
        request: error.request,
        config: error.config
      });
      
      // Handle different types of errors
      let errorMessage = 'Upload failed. Please try again.';
      
      if (error.response) {
        // Server responded with error status
        const status = error.response.status;
        const data = error.response.data;
        console.log('Server error response:', { status, data });
        
        switch (status) {
          case 400:
            errorMessage = data.message || 'Invalid file or patient data.';
            break;
          case 401:
            errorMessage = 'Authentication required. Please log in again.';
            break;
          case 403:
            errorMessage = 'Access denied. Insufficient permissions.';
            break;
          case 413:
            errorMessage = 'File too large. Please choose a smaller file.';
            break;
          case 415:
            errorMessage = 'Unsupported file type. Please use PDF, JPG, PNG, or DOC files.';
            break;
          case 500:
            errorMessage = 'Server error. Please try again later.';
            break;
          default:
            errorMessage = data.message || `Upload failed (Error ${status}).`;
        }
      } else if (error.request) {
        // Network error - no response from server
        console.log('Network error details:', error.request);
        errorMessage = `Network error: Cannot connect to server at ${API_CONFIG.BASE_URL}. Please check if the backend is running.`;
      } else if (error.code === 'ECONNABORTED') {
        // Timeout error
        errorMessage = 'Upload timeout. Please try again with a smaller file.';
      } else {
        console.log('Other error:', error.message);
        errorMessage = `Upload error: ${error.message}`;
      }
      
      setUploadStatus('Upload failed');
      alert(errorMessage);
      
      // Reset upload status after delay
      setTimeout(() => {
        setUploadStatus('');
      }, 3000);
    } finally {
      setIsUploading(false);
    }
  };

  const quickActions = [
    {
      icon: 'ü©∫',
      title: 'Symptoms Check',
      description: 'Describe your symptoms and get guidance'
    },
    {
      icon: 'üíä',
      title: 'Medication Info',
      description: 'Learn about medications and side effects'
    },
    {
      icon: 'üìã',
      title: 'Appointment Prep',
      description: 'Prepare questions for your doctor visit'
    },
    {
      icon: 'üè•',
      title: 'Find Care',
      description: 'Locate healthcare services near you'
    },
    {
      icon: 'üìö',
      title: 'Health Education',
      description: 'Access reliable health information'
    },
    {
      icon: 'üßò‚Äç‚ôÄÔ∏è',
      title: 'Wellness Tips',
      description: 'Get personalized wellness advice'
    }
  ];

  return (
    <div className="container">
      {/* Authentication Banner */}
      <div className="auth-banner">
        <div className="auth-info">
          <span className="user-role">
            {isLoggedIn ? `Logged in as: ${userRole.charAt(0).toUpperCase() + userRole.slice(1)}` : 'Not logged in'}
          </span>
          {isLoggedIn && (
            <button className="logout-btn" onClick={handleLogout}>
              Logout
            </button>
          )}
        </div>
        {!isLoggedIn && (
          <div className="login-buttons">
            <button className="login-btn patient" onClick={() => handleLogin('patient')}>
              Login as Patient
            </button>
            <button className="login-btn doctor" onClick={() => handleLogin('doctor')}>
              Login as Doctor
            </button>
            <button className="login-btn admin" onClick={() => handleLogin('admin')}>
              Login as Admin
            </button>
          </div>
        )}
      </div>

      {/* Emergency Banner */}
      <div className="emergency-banner">
        <strong>üö® EMERGENCY? Call 911 immediately!</strong> Carebot is not for medical emergencies.
      </div>

      {/* Header */}
      <div className="header">
        <h1>ü§ñ Carebot</h1>
        <p>Your AI-powered healthcare assistant, available 24/7 to provide reliable health information and guidance</p>
      </div>

      {/* Main Content */}
      <div className={`main-content ${!hasUploadAccess || currentAdminView === 'upload' ? 'single-column' : ''}`}>
        {/* Chat Section - Hidden for Admin Users */}
        {userRole !== 'admin' && (
          <div className="chat-section">
            <h2 className="section-title">
              üí¨ Chat with Carebot
            </h2>
            <div className="chat-container">
              <div className="chat-messages" ref={chatMessagesRef}>
                <div className="welcome-message">
                  <strong>Welcome to Carebot! üëã</strong>
                  <br />
                  I'm here to help you with health questions, symptom guidance, and medical information. 
                  Ask me anything about your health concerns, medications, or wellness tips!
                  <br /><br />
                  <strong>Remember:</strong> I provide general information only. For emergencies or serious concerns, contact your healthcare provider immediately.
                  {isLoggedIn && (
                    <>
                      <br /><br />
                      <strong>Current Access Level:</strong> {userRole.charAt(0).toUpperCase() + userRole.slice(1)}
                      {hasUploadAccess && <span className="access-indicator"> ‚úÖ Document Upload Access</span>}
                      {!hasUploadAccess && <span className="access-indicator"> ‚ÑπÔ∏è Chat Access Only</span>}
                    </>
                  )}
                </div>
                
                {/* Chat Messages */}
                {chatMessages.map((msg, index) => (
                  <div key={index} className={`chat-message ${msg.type}`}>
                    <div className="message-header">
                      <span className="message-sender">
                        {msg.type === 'bot' ? 'ü§ñ Carebot' : 'üë§ You'}
                      </span>
                      <span className="message-time">
                        {msg.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                      </span>
                    </div>
                    <div className="message-content">
                      {msg.message.split('\n').map((line, lineIndex) => (
                        <div key={lineIndex}>
                          {line.startsWith('**') && line.endsWith('**') ? (
                            <strong>{line.slice(2, -2)}</strong>
                          ) : line.startsWith('‚Ä¢') ? (
                            <div style={{marginLeft: '20px'}}>{line}</div>
                          ) : (
                            line
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
                
                {/* Loading indicator */}
                {isChatLoading && (
                  <div className="chat-message bot">
                    <div className="message-header">
                      <span className="message-sender">ü§ñ Carebot</span>
                      <span className="message-time">typing...</span>
                    </div>
                    <div className="message-content">
                      <div className="typing-indicator">
                        <span></span><span></span><span></span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
              <div className="chat-input-container">
                <input
                  type="text"
                  className="chat-input"
                  placeholder="Ask me about your health concerns..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                />
                <button className="send-button" onClick={handleSendMessage}>
                  ‚û§
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Upload Section - Only visible to admins and when upload view is active */}
        {hasUploadAccess && currentAdminView === 'upload' && (
          <div className="upload-section-centered">
            <div className="upload-header">
              <h2 className="section-title">
                üìé Upload Documents
                <span className="admin-only-badge">Admin Only</span>
              </h2>
              <button 
                className="cancel-btn"
                onClick={() => setCurrentAdminView('none')}
                title="Back to Dashboard"
              >
                ‚úï Cancel
              </button>
            </div>
            
            <div className="upload-content">
            {/* Patient Information Fields */}
            <div className="patient-info-section">
              <h3 className="subsection-title">Patient Information</h3>
              <div className="patient-info-fields">
                <div className="input-group">
                  <label htmlFor="patient-name" className="input-label">
                    Patient Name *
                  </label>
                  <input
                    id="patient-name"
                    type="text"
                    className="patient-input"
                    placeholder="Enter patient's full name"
                    value={patientName}
                    onChange={(e) => setPatientName(e.target.value)}
                    required
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="contact-number" className="input-label">
                    Contact Number *
                  </label>
                  <input
                    id="contact-number"
                    type="tel"
                    className="patient-input"
                    placeholder="Enter contact number"
                    value={contactNumber}
                    onChange={(e) => setContactNumber(e.target.value)}
                    required
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="date-of-birth" className="input-label">
                    Date of Birth *
                  </label>
                  <input
                    id="date-of-birth"
                    type="date"
                    className="patient-input"
                    value={dateOfBirth}
                    onChange={(e) => setDateOfBirth(e.target.value)}
                    required
                  />
                </div>
              </div>
            </div>

            {/* File Upload Section */}
            <div className="file-upload-section">
              <h3 className="subsection-title">Document Upload</h3>
              <div 
                className={`upload-container ${isDragOver ? 'dragover' : ''}`}
                onDrop={handleDrop}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onClick={() => document.getElementById('file-input').click()}
              >
                <div className="upload-icon">üìÑ</div>
                <div className="upload-text">
                  {uploadedFile ? 'File uploaded successfully!' : 'Upload medical documents, lab results, or images'}
                </div>
                <div className="upload-subtext">
                  Drag & drop files here or click to browse
                  <br />
                  <small>Supported: PDF, JPG, PNG, DOC (Max 10MB)</small>
                </div>
                <input
                  id="file-input"
                  type="file"
                  className="file-input"
                  accept=".pdf,.jpg,.jpeg,.png,.doc,.docx"
                  onChange={(e) => handleFileUpload(e.target.files[0])}
                />
                {!uploadedFile && (
                  <button 
                    className="upload-button"
                    onClick={(e) => {
                      e.stopPropagation();
                      document.getElementById('file-input').click();
                    }}
                  >
                    Choose File
                  </button>
                )}
              </div>

              {uploadedFile && (
                <div className="uploaded-file">
                  <div className="file-info">
                    <span>üìé</span>
                    <div>
                      <div className="file-name">{uploadedFile.name}</div>
                      <div className="file-size">{uploadedFile.size}</div>
                    </div>
                  </div>
                  <button className="remove-file" onClick={removeUploadedFile}>
                    ‚úï
                  </button>
                </div>
              )}
            </div>

            {/* Submit Button */}
            <div className="submit-section">
              {uploadStatus && (
                <div className={`upload-status ${uploadStatus.includes('successful') ? 'success' : uploadStatus.includes('failed') ? 'error' : 'progress'}`}>
                  {uploadStatus}
                </div>
              )}
              <button 
                className="submit-upload-btn"
                onClick={handleSubmitUpload}
                disabled={!uploadedFile || !patientName.trim() || !contactNumber.trim() || !dateOfBirth.trim() || isUploading}
              >
                {isUploading ? 'Uploading...' : 'Submit Upload'}
              </button>
              <p className="submit-note">
                * All fields are required. Please ensure patient information is accurate.
                <br />
                <small>üì° Documents will be uploaded to the secure server with patient information as payload.</small>
              </p>
            </div>
            </div>
          </div>
        )}

        {/* Access Restriction Notice for non-admins */}
        {!hasUploadAccess && isLoggedIn && (
          <div className="access-restriction-notice">
            <h2 className="section-title">
              üîí Document Upload
            </h2>
            <div className="restriction-message">
              <div className="restriction-icon">üõ°Ô∏è</div>
              <div className="restriction-text">
                <strong>Access Restricted</strong>
                <p>Document upload functionality is only available to hospital administrators.</p>
                <p>If you need to upload medical documents, please contact your healthcare facility's administration.</p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Admin Welcome View - Default view for admin users */}
      {hasUploadAccess && currentAdminView === 'none' && (
        <div className="admin-welcome">
          <div className="welcome-content">
            <h2 className="section-title">
              üë®‚Äç‚öïÔ∏è Administrator Dashboard
              <span className="admin-only-badge">Admin Only</span>
            </h2>
            <div className="welcome-message-admin">
              <div className="welcome-icon">üè•</div>
              <div className="welcome-text">
                <h3>Welcome to the Healthcare Admin Portal</h3>
                <p>Select an option below to get started:</p>
                <div className="admin-nav-buttons-welcome">
                  <button 
                    className={`nav-button dashboard-nav-btn ${currentAdminView === 'dashboard' ? 'active' : ''}`}
                    onClick={loadPatientsDashboard}
                    disabled={isLoadingPatients}
                  >
                    {isLoadingPatients ? 'üîÑ Loading...' : 'üë• Patients Dashboard'}
                  </button>
                  <button 
                    className={`nav-button upload-nav-btn ${currentAdminView === 'upload' ? 'active' : ''}`}
                    onClick={() => {
                      setShowPatientsDashboard(false);
                      setCurrentAdminView('upload');
                    }}
                  >
                    üìé Document Upload
                  </button>
                </div>
                <div className="admin-note">
                  <p><em>This administrative interface provides secure access to patient management tools and document handling systems.</em></p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Patients Dashboard - Only visible to admins */}
      {hasUploadAccess && showPatientsDashboard && (
        <div className="patients-dashboard-centered">
          <div className="dashboard-header">
            <h2 className="section-title">
              üë• Patients Dashboard
              <span className="admin-only-badge">Admin Only</span>
            </h2>
            <button 
              className="cancel-btn"
              onClick={() => {
                setShowPatientsDashboard(false);
                setCurrentAdminView('none');
              }}
              title="Back to Dashboard"
            >
              ‚úï Cancel
            </button>
          </div>

          <div className="dashboard-controls">
            <input
              type="text"
              placeholder="Search patients by name or contact..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="dashboard-search"
            />
          </div>

          <div className="dashboard-content">
            {/* Patients List */}
            <div className="patients-list">
              <h3 className="list-title">Patients ({filteredPatients.length})</h3>
              <div className="patients-container">
                {filteredPatients.length > 0 ? (
                  filteredPatients.map((patient) => (
                    <div 
                      key={patient.id}
                      className={`patient-card ${selectedPatient?.id === patient.id ? 'selected' : ''}`}
                      onClick={() => selectPatient(patient)}
                    >
                      <div className="patient-name">
                        {patient.patientName}
                      </div>
                      <div className="patient-info">
                        üìû {patient.contactNumber}
                      </div>
                      <div className="patient-info">
                        üéÇ {patient.dateOfBirth}
                      </div>
                      <div className="patient-date">
                        Added: {new Date(patient.createdAt).toLocaleDateString()}
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="no-patients">
                    {searchTerm ? 'No patients found matching your search.' : 'No patients found.'}
                  </div>
                )}
              </div>
            </div>

            {/* Patient Details */}
            <div className="patient-details">
              {selectedPatient ? (
                <div>
                  <h3 className="details-title">Patient Details</h3>
                  <div className="patient-info-card">
                    <div className="info-item">
                      <strong>Name:</strong> {selectedPatient.patientName}
                    </div>
                    <div className="info-item">
                      <strong>Contact:</strong> {selectedPatient.contactNumber}
                    </div>
                    <div className="info-item">
                      <strong>Date of Birth:</strong> {selectedPatient.dateOfBirth}
                    </div>
                    <div className="info-item">
                      <strong>Patient ID:</strong> {selectedPatient.id}
                    </div>
                    <div className="info-item">
                      <strong>Registered:</strong> {new Date(selectedPatient.createdAt).toLocaleString()}
                    </div>
                  </div>

                  <h4 className="documents-title">Documents</h4>
                  <div className="patient-documents">
                    {patientDocuments.length > 0 ? (
                      patientDocuments.map((doc) => (
                        <div key={doc.id} className="document-card">
                          <div className="document-name">üìÑ {doc.fileName}</div>
                          <div className="document-meta">
                            Type: {doc.fileType} | Size: {(doc.fileSize / 1024).toFixed(2)} KB
                          </div>
                          <div className="document-date">
                            Uploaded: {new Date(doc.uploadDate).toLocaleString()}
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="no-documents">
                        No documents found for this patient.
                      </div>
                    )}
                  </div>
                </div>
              ) : (
                <div className="select-patient-prompt">
                  Select a patient to view details
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Quick Actions */}
      <div className="quick-actions">
        <h2 className="section-title">
          ‚ö° Quick Actions
        </h2>
        <div className="actions-grid">
          {quickActions.map((action, index) => (
            <div key={index} className="action-card" onClick={() => setMessage(action.title)}>
              <div className="action-icon">{action.icon}</div>
              <div className="action-title">{action.title}</div>
              <div className="action-description">{action.description}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Footer */}
      <div className="footer">
        <p>
          <strong>Disclaimer:</strong> Carebot provides general health information only and does not replace professional medical advice. 
          Always consult with qualified healthcare professionals for medical concerns.
        </p>
        <p style={{ marginTop: '10px' }}>
          Last Updated: August 2025 | Version 1.0
        </p>
      </div>
    </div>
  );
}

export default App;
